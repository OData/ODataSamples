<#
// Copyright (c) Microsoft Corporation.  All rights reserved.
// Licensed under the MIT License.  See License.txt in the project root for license information.
#><#+
    private void GenerateFromAllTextFiles()
    {
        string templatePath = Path.GetDirectoryName(this.Host.TemplateFile);

        foreach (string textFile in Configuration.TextFiles)
        {
            string fullname = Path.Combine(templatePath, textFile);
            GenerateFromSingleTextFile(fullname);
        }
    }

    private void GenerateFromSingleTextFile(string fullname)
    {
        using (var reader = new StreamReader(fullname))
        {
            while (!reader.EndOfStream)
            {
                string line = reader.ReadLine();
                GenerateFromSingleLine(line);
            }
        }
    }

    private void GenerateFromSingleLine(string line)
    {
        if (string.IsNullOrEmpty(line))
        {
            // Skip empty line.
            return;
        }

        // Remove leading and trailing whitespaces,
        line = line.Trim();

        if (line.StartsWith(";"))
        {
            // Skip comment line.
            return;
        }

        // Find the first occurrence of '='.
        int equalPos = line.IndexOf('=');
        if (equalPos < 0)
        {
            throw new InvalidOperationException("Missing equal operator");
        }

        string id = line.Substring(0, equalPos);
        if (string.IsNullOrEmpty(id))
        {
            throw new InvalidOperationException("Invalid resource id");
        }

        string content = line.Substring(equalPos + 1);
        if (string.IsNullOrEmpty(content))
        {
            throw new InvalidOperationException("Invalid resource content");
        }

        GenerateFromSingleResource(id, content);
    }
#>